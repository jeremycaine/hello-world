kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: hello-world-template
  annotations:
    openshift.io/display-name: Node.js
    description: Simple Hello World app in NodeJS
    tags: nodejs
    iconClass: icon-nodejs
    openshift.io/long-description: This template defines resources needed to develop
      a basic Hello World NodeJS application, including a build configuration and
      application deployment configuration.  It does not include a database.
    openshift.io/provider-display-name: jeremycaine
    openshift.io/documentation-url: https://github.com/jeremycaine/hello-world
    openshift.io/support-url: https://github.com/jeremycaine
    template.openshift.io/bindable: 'false'
message: "The following service(s) have been created in your project: ${PROJECT}.\n\n"
labels:
  template: hello-world-template
  app: "${NAME}"
objects:
- kind: Service
  apiVersion: v1
  metadata:
    name: "${NAME}"
    annotations:
      description: Exposes and load balances the application pods
  spec:
    ports:
    - name: web
      port: "${{SERVER_PORT}}"
      targetPort: "${{SERVER_PORT}}"
    selector:
      name: "${NAME}"
- kind: Route
  apiVersion: route.openshift.io/v1
  metadata:
    name: "${NAME}-route"
  spec:
    host: "${APPLICATION_DOMAIN}"
    to:
      kind: Service
      name: "${NAME}"
- kind: ImageStream
  apiVersion: image.openshift.io/v1
  metadata:
    labels:
      app: "${NAME}"
      app.kubernetes.io/component: "${NAME}"
      app.kubernetes.io/instance: "${NAME}"
    name: "${NAME}"
    namespace: "${PROJECT}"
    annotations:
      description: Keeps track of changes in the application image
  spec:
    tags:
    - annotations:
        openshift.io/imported-from: registry.access.redhat.com/ubi9/nodejs-16-minimal
      from:
        kind: DockerImage
        name: registry.access.redhat.com/ubi9/nodejs-16-minimal
  spec:
    lookupPolicy:
      local: false
- kind: ImageStream
  apiVersion: image.openshift.io/v1
  metadata:
    labels:
      app: "${NAME}"
      app.kubernetes.io/component: "${NAME}"
      app.kubernetes.io/instance: "${NAME}"
    name: nodejs-16-minimal
    namespace: "${PROJECT}"
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations:
        openshift.io/imported-from: registry.access.redhat.com/ubi9/nodejs-16-minimal
      from:
        kind: DockerImage
        name: registry.access.redhat.com/ubi9/nodejs-16-minimal
      name: latest
      referencePolicy:
        type: Source
- kind: BuildConfig
  apiVersion: build.openshift.io/v1
  metadata:
    name: "${NAME}-build"
    namespace: "${PROJECT}"
    annotations:
      description: Defines how to build the application
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec:
    source:
      git:
        ref: "${SOURCE_REPOSITORY_REF}"
        uri: "${SOURCE_REPOSITORY_URL}"
      type: Git
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          namespace: "${PROJECT}"
          name: nodejs-16-minimal:latest
      type: Docker
    output:
      to:
        kind: ImageStreamTag
        namespace: "${PROJECT}"
        name: "${NAME}:latest"
    triggers:
    - type: ImageChange
    - type: ConfigChange
    - type: GitHub
      github:
        secret: "${GITHUB_WEBHOOK_SECRET}"
    - type: Generic
      generic:
        secret: "${GENERIC_WEBHOOK_SECRET}"
    postCommit:
      script: npm test
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${NAME}-deployment"
    annotations:
      description: Defines how to deploy the application server
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec:
    strategy:
      type: Rolling
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${NAME}"
        from:
          kind: ImageStreamTag
          namespace: "${PROJECT}"
          name: "${NAME}:latest"
    - type: ConfigChange
    replicas: 1
    selector:
      name: "${NAME}"
    template:
      metadata:
        name: "${NAME}"
        labels:
          name: "${NAME}"
      spec:
        containers:
        - name: "${NAME}"
          image: " "
          securityContext:
            runAsUser: 1234
            runAsGroup: 5678
          ports:
          - containerPort: "${{SERVER_PORT}}"
          readinessProbe:
            timeoutSeconds: 3
            initialDelaySeconds: 3
            httpGet:
              path: "/"
              port: "${{SERVER_PORT}}"
          livenessProbe:
            timeoutSeconds: 3
            initialDelaySeconds: 30
            httpGet:
              path: "/"
              port: "${{SERVER_PORT}}"
          resources:
            limits:
              memory: "${MEMORY_LIMIT}"
          serviceAccountName: developer-sa
          serviceAccount: developer-sa
          securityContext:
            supplementalGroups:
              - 5777
              - 5888
            fsGroup: 5555
parameters:
- name: NAME
  displayName: Name
  description: The application name assigned to all of the objects defined in this template.
  required: true
  value: hello-world
- name: PROJECT
  displayName: Project
  description: The OpenShift Project (Namespace) where the objects resides.
  required: true
- name: MEMORY_LIMIT
  displayName: Memory Limit
  description: Maximum amount of memory the container can use.
  required: true
  value: 256Mi
- name: SOURCE_REPOSITORY_URL
  displayName: Git Repository URL
  description: The URL of the repository with the application source code.
  required: true
  value: https://github.com/jeremycaine/hello-world
- name: SOURCE_REPOSITORY_REF
  displayName: Git Reference
  description: Set this to a branch name, tag or other ref of your repository if you
    are not using the default branch.
  value: main
- name: APPLICATION_DOMAIN
  displayName: Application Hostname
  description: The exposed hostname that will route to the Node.js service, if left
    blank a value will be defaulted.
  value: ''
- name: GITHUB_WEBHOOK_SECRET
  displayName: GitHub Webhook Secret
  description: Github trigger secret.  A difficult to guess string encoded as part
    of the webhook URL.  Not encrypted.
  generate: expression
  from: "[a-zA-Z0-9]{40}"
- name: GENERIC_WEBHOOK_SECRET
  displayName: Generic Webhook Secret
  description: A secret string used to configure the Generic webhook.
  generate: expression
  from: "[a-zA-Z0-9]{40}"
- name: SERVER_PORT
  displayName: Server Listen Port
  description: 'Port the Server will listen on '
  required: true
  value: '3000'
